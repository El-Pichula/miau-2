#include <iostream>
#include <fstream>
using namespace std;

const string CONTRASENA_OPERADOR = "operador123", CONTRASENA_DIRECTIVO = "directivo456";

class sistema {
protected:
    float mn[12][15]; // Matriz de números reales
    int M; // Número de meses
    int N; // Número de sucursales

public:
    sistema() {
        M = 0;
        N = 0;
        for (int i = 0; i < 12; i++) { // Inicialización de la matriz
            for (int j = 0; j < 15; j++) {
                mn[i][j] = 0.0;
            }
        }
    }

    // Método para ingresar las ventas de cada sucursal en cada mes
    void ingresarVentas() {
        do {
            cout << "Ingrese el numero de sucursales (maximo 15): ";
            cin >> N;
            if (N < 1 || N > 15) {
                cout << "El numero de sucursales debe estar entre 1 y 15!!!" << endl;
            }
        } while (N < 1 || N > 15);

        do {
            cout << "Ingrese el numero de meses (maximo 12): ";
            cin >> M;
            if (M < 1 || M > 12) {
                cout << "El numero de meses debe estar entre 1 y 12!!!" << endl;
            }
        } while (M < 1 || M > 12);

        for (int i = 0; i < M; ++i) {
            for (int j = 0; j < N; ++j) {
                cout << "Ingrese ventas de la sucursal " << j + 1 << " en el mes " << i + 1 << ": ";
                cin >> mn[i][j];
            }
        }
    }

    // Método para mostrar las ventas de cada sucursal en cada mes
    void mostrarVentas() {
        cout << "\nGanancias de " << N << " sucursales en " << M << " meses\n";
        cout << "\t\t";
        for (int i = 0; i < M; i++) { // Mostrar encabezados de meses
            cout << "mes " << i + 1 << "\t";
        }
        cout << endl;

        for (int i = 0; i < N; i++) { // Recorrido por columnas (sucursales)
            cout << "sucursal " << i + 1 << "\t";
            for (int j = 0; j < M; j++) { // Recorrido por filas (meses)
                cout << mn[j][i] << "\t";
            }
            cout << endl;
        }
    }

    // Método para respaldar los datos de ventas en un archivo
    void respaldarDatos() {
        char respuesta;
        cout << "¿Desea respaldar los datos en un archivo? (s/n): ";
        cin >> respuesta;

        if (respuesta == 's' || respuesta == 'S') {
            string nombreArchivo;
            cout << "Ingrese el nombre del archivo: ";
            cin >> nombreArchivo;

            ofstream archivo(nombreArchivo + ".txt");

            for (int i = 0; i < M; ++i) {
                for (int j = 0; j < N; ++j) {
                    archivo << mn[i][j] << " ";
                }
                archivo << endl;
            }

            archivo.close();
            cout << "Los datos se han guardado exitosamente en " << nombreArchivo << ".txt" << endl;
        }
    }

};

int main() {
    int opcion;

    cout << "Cosmeticos gatito: Sistema de gestion de ventas." << endl;

    do {
        // Menú principal para seleccionar el tipo de usuario
        cout << "\nSeleccione el tipo de usuario:" << endl;
        cout << "1. Operador" << endl;
        cout << "2. Directivo" << endl;
        cout << "3. Salir del programa" << endl;
        cin >> opcion;

        sistema miau;

        if (opcion == 1) { // Opción para operador
            string contrasena;
            cout << "\nIngrese la clave de operador: ";
            cin >> contrasena;

            if (contrasena == CONTRASENA_OPERADOR) { // Verificación de la contraseña del operador
                miau.ingresarVentas();
                miau.mostrarVentas();
                miau.respaldarDatos();
            } else {
                cout << "\nINCORRECTO, ACCESO DENEGADO." << endl;
            }
        } else if (opcion == 2) { // Opción para directivo
            string contrasena;
            cout << "\nIngrese la clave de directivo: ";
            cin >> contrasena;

            if (contrasena == CONTRASENA_DIRECTIVO) { // Verificación de la contraseña del directivo
                cout << "\nFuncionalidad del Directivo aun no implementada miau :33" << endl;
            } else {
                cout << "\nINCORRECTO, ACCESO DENEGADO." << endl;
            }
        } else if (opcion != 3) { // Opción para salir del programa
            cout << "\nOpcion invalida. Por favor, seleccione una opcion valida." << endl;
        }
    } while (opcion != 3); // El bucle continúa hasta que se selecciona la opción de salir del programa

    return 0;
}
